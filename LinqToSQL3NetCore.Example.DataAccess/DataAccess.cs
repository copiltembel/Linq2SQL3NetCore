#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by LINQ to SQL template for T4 C#
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Reflection;
using System.Runtime.Serialization;

namespace Db.DataAccess.DataSet
{
	[DatabaseAttribute(Name=@"L2S")]
	public partial class DbDataContext : DataContext
	{
		private static MappingSource mappingSource = new AttributeMappingSource();
		
		#region Extensibility Method Definitions
		partial void OnCreated();
		partial void InsertAddress(Address instance);
		partial void UpdateAddress(Address instance);
		partial void DeleteAddress(Address instance);
		partial void InsertCountry(Country instance);
		partial void UpdateCountry(Country instance);
		partial void DeleteCountry(Country instance);
		partial void InsertItem(Item instance);
		partial void UpdateItem(Item instance);
		partial void DeleteItem(Item instance);
		partial void InsertOrder(Order instance);
		partial void UpdateOrder(Order instance);
		partial void DeleteOrder(Order instance);
		partial void InsertPerson(Person instance);
		partial void UpdatePerson(Person instance);
		partial void DeletePerson(Person instance);
		partial void InsertTestTable1(TestTable1 instance);
		partial void UpdateTestTable1(TestTable1 instance);
		partial void DeleteTestTable1(TestTable1 instance);
		partial void InsertTestTable2(TestTable2 instance);
		partial void UpdateTestTable2(TestTable2 instance);
		partial void DeleteTestTable2(TestTable2 instance);
		partial void InsertTestTable3(TestTable3 instance);
		partial void UpdateTestTable3(TestTable3 instance);
		partial void DeleteTestTable3(TestTable3 instance);
		partial void InsertTestTable4(TestTable4 instance);
		partial void UpdateTestTable4(TestTable4 instance);
		partial void DeleteTestTable4(TestTable4 instance);
		#endregion
		
		#region Construction
	
		public DbDataContext(string connection) :
			base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(System.Data.IDbConnection connection) :
			base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(string connection, MappingSource mappingSource) :
			base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
			base(connection, mappingSource)
		{
			OnCreated();
		}
		#endregion
		
		#region Tables
		public Table<Address> Addresses
		{
			get { return GetTable<Address>(); }
		}
		
		public Table<Country> Countries
		{
			get { return GetTable<Country>(); }
		}
		
		public Table<Item> Items
		{
			get { return GetTable<Item>(); }
		}
		
		public Table<Order> Orders
		{
			get { return GetTable<Order>(); }
		}
		
		public Table<Person> Persons
		{
			get { return GetTable<Person>(); }
		}
		
		public Table<TestTable1> TestTable1s
		{
			get { return GetTable<TestTable1>(); }
		}
		
		public Table<TestTable2> TestTable2s
		{
			get { return GetTable<TestTable2>(); }
		}
		
		public Table<TestTable3> TestTable3s
		{
			get { return GetTable<TestTable3>(); }
		}
		
		public Table<TestTable4> TestTable4s
		{
			get { return GetTable<TestTable4>(); }
		}
		
		#endregion
		
		#region Functions
		[Function(Name=@"dbo.sp_alterdiagram")]
		[return: Parameter(DbType=@"Int")]
		public int Sp_alterdiagram(
				[Parameter(DbType=@"NVarChar(128)")] string diagramname,
				[Parameter(DbType=@"Int")] int? owner_id,
				[Parameter(DbType=@"Int")] int? version,
				[Parameter(DbType=@"VarBinary(MAX)")] Binary definition) {
			IExecuteResult result = ExecuteMethodCall(this, (MethodInfo) MethodInfo.GetCurrentMethod(), diagramname, owner_id, version, definition);
			return (int) result.ReturnValue;
		}
		
		[Function(Name=@"dbo.sp_creatediagram")]
		[return: Parameter(DbType=@"Int")]
		public int Sp_creatediagram(
				[Parameter(DbType=@"NVarChar(128)")] string diagramname,
				[Parameter(DbType=@"Int")] int? owner_id,
				[Parameter(DbType=@"Int")] int? version,
				[Parameter(DbType=@"VarBinary(MAX)")] Binary definition) {
			IExecuteResult result = ExecuteMethodCall(this, (MethodInfo) MethodInfo.GetCurrentMethod(), diagramname, owner_id, version, definition);
			return (int) result.ReturnValue;
		}
		
		[Function(Name=@"dbo.sp_dropdiagram")]
		[return: Parameter(DbType=@"Int")]
		public int Sp_dropdiagram(
				[Parameter(DbType=@"NVarChar(128)")] string diagramname,
				[Parameter(DbType=@"Int")] int? owner_id) {
			IExecuteResult result = ExecuteMethodCall(this, (MethodInfo) MethodInfo.GetCurrentMethod(), diagramname, owner_id);
			return (int) result.ReturnValue;
		}
		
		[Function(Name=@"dbo.sp_helpdiagramdefinition")]
		public ISingleResult<Sp_helpdiagramdefinitionResult> Sp_helpdiagramdefinition(
				[Parameter(DbType=@"NVarChar(128)")] string diagramname,
				[Parameter(DbType=@"Int")] int? owner_id) {
			IExecuteResult result = ExecuteMethodCall(this, (MethodInfo) MethodInfo.GetCurrentMethod(), diagramname, owner_id);
			return (ISingleResult<Sp_helpdiagramdefinitionResult>) result.ReturnValue;
		}
		
		[Function(Name=@"dbo.sp_helpdiagrams")]
		public ISingleResult<Sp_helpdiagramsResult> Sp_helpdiagrams(
				[Parameter(DbType=@"NVarChar(128)")] string diagramname,
				[Parameter(DbType=@"Int")] int? owner_id) {
			IExecuteResult result = ExecuteMethodCall(this, (MethodInfo) MethodInfo.GetCurrentMethod(), diagramname, owner_id);
			return (ISingleResult<Sp_helpdiagramsResult>) result.ReturnValue;
		}
		
		[Function(Name=@"dbo.sp_renamediagram")]
		[return: Parameter(DbType=@"Int")]
		public int Sp_renamediagram(
				[Parameter(DbType=@"NVarChar(128)")] string diagramname,
				[Parameter(DbType=@"Int")] int? owner_id,
				[Parameter(DbType=@"NVarChar(128)")] string new_diagramname) {
			IExecuteResult result = ExecuteMethodCall(this, (MethodInfo) MethodInfo.GetCurrentMethod(), diagramname, owner_id, new_diagramname);
			return (int) result.ReturnValue;
		}
		
		#endregion
		
	}
}

namespace Db.DataAccess.DataSet
{	
	[DataContract()]
	[Table(Name=@"dbo.Address")]
	[KnownType(typeof(Address))]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public Address()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			_Country = default(EntityRef<Country>); 
			_Person = default(EntityRef<Person>); 
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnIdChanging(int value);
		partial void OnIdChanged();
		private int _Id;
		[Column(Storage=@"_Id", AutoSync=AutoSync.OnInsert, DbType=@"Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int Id
		{
			get { return _Id; }
			set {
				if (_Id != value) {
					OnIdChanging(value);
					SendPropertyChanging();
					_Id = value;
					SendPropertyChanged("Id");
					OnIdChanged();
				}
			}
		}
		
		partial void OnStreetChanging(string value);
		partial void OnStreetChanged();
		private string _Street;
		[Column(Storage=@"_Street", DbType=@"NChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Street
		{
			get { return _Street; }
			set {
				if (_Street != value) {
					OnStreetChanging(value);
					SendPropertyChanging();
					_Street = value;
					SendPropertyChanged("Street");
					OnStreetChanged();
				}
			}
		}
		
		partial void OnNumberChanging(string value);
		partial void OnNumberChanged();
		private string _Number;
		[Column(Storage=@"_Number", DbType=@"NChar(20) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string Number
		{
			get { return _Number; }
			set {
				if (_Number != value) {
					OnNumberChanging(value);
					SendPropertyChanging();
					_Number = value;
					SendPropertyChanged("Number");
					OnNumberChanged();
				}
			}
		}
		
		partial void OnPostCodeChanging(string value);
		partial void OnPostCodeChanged();
		private string _PostCode;
		[Column(Storage=@"_PostCode", DbType=@"NChar(100) NOT NULL", CanBeNull=false)]
		[DataMember(Order=4)]
		public string PostCode
		{
			get { return _PostCode; }
			set {
				if (_PostCode != value) {
					OnPostCodeChanging(value);
					SendPropertyChanging();
					_PostCode = value;
					SendPropertyChanged("PostCode");
					OnPostCodeChanged();
				}
			}
		}
		
		partial void OnCityChanging(string value);
		partial void OnCityChanged();
		private string _City;
		[Column(Storage=@"_City", DbType=@"NChar(40) NOT NULL", CanBeNull=false)]
		[DataMember(Order=5)]
		public string City
		{
			get { return _City; }
			set {
				if (_City != value) {
					OnCityChanging(value);
					SendPropertyChanging();
					_City = value;
					SendPropertyChanged("City");
					OnCityChanged();
				}
			}
		}
		
		partial void OnCountryIdChanging(int value);
		partial void OnCountryIdChanged();
		private int _CountryId;
		[Column(Storage=@"_CountryId", DbType=@"Int NOT NULL", CanBeNull=false)]
		[DataMember(Order=6)]
		public int CountryId
		{
			get { return _CountryId; }
			set {
				if (_CountryId != value) {
					if (_Country.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnCountryIdChanging(value);
					SendPropertyChanging();
					_CountryId = value;
					SendPropertyChanged("CountryId");
					OnCountryIdChanged();
				}
			}
		}
		
		partial void OnPersonIdChanging(int value);
		partial void OnPersonIdChanged();
		private int _PersonId;
		[Column(Storage=@"_PersonId", DbType=@"Int NOT NULL", CanBeNull=false)]
		[DataMember(Order=7)]
		public int PersonId
		{
			get { return _PersonId; }
			set {
				if (_PersonId != value) {
					if (_Person.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnPersonIdChanging(value);
					SendPropertyChanging();
					_PersonId = value;
					SendPropertyChanged("PersonId");
					OnPersonIdChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntityRef<Country> _Country;
		[Association(Name=@"FK_Country_Addresses", Storage=@"_Country", ThisKey=@"CountryId", OtherKey=@"Id", IsForeignKey=true)]
		public Country Country
		{
			get {
				return _Country.Entity;
			}
			set {
				Country previousValue = _Country.Entity;
				if ((previousValue != value) || (!_Country.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Country.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					_Country.Entity = value;
					if (value != null) {
						value.Addresses.Add(this);
						_CountryId = value.Id;
					}
					else {
						_CountryId = default(int);
					}
					SendPropertyChanged("Country");
				}
			}
		}

		private EntityRef<Person> _Person;
		[Association(Name=@"FK_Person_Addresses", Storage=@"_Person", ThisKey=@"PersonId", OtherKey=@"Id", IsForeignKey=true)]
		public Person Person
		{
			get {
				return _Person.Entity;
			}
			set {
				Person previousValue = _Person.Entity;
				if ((previousValue != value) || (!_Person.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Person.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					_Person.Entity = value;
					if (value != null) {
						value.Addresses.Add(this);
						_PersonId = value.Id;
					}
					else {
						_PersonId = default(int);
					}
					SendPropertyChanged("Person");
				}
			}
		}

		#endregion
		
		#region Serialization
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}

namespace Db.DataAccess.DataSet
{	
	[DataContract()]
	[Table(Name=@"dbo.Country")]
	[KnownType(typeof(Country))]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public Country()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			_Addresses = new EntitySet<Address>(attach_Addresses, detach_Addresses);
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnIdChanging(int value);
		partial void OnIdChanged();
		private int _Id;
		[Column(Storage=@"_Id", AutoSync=AutoSync.OnInsert, DbType=@"Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int Id
		{
			get { return _Id; }
			set {
				if (_Id != value) {
					OnIdChanging(value);
					SendPropertyChanging();
					_Id = value;
					SendPropertyChanged("Id");
					OnIdChanged();
				}
			}
		}
		
		partial void OnNameChanging(string value);
		partial void OnNameChanged();
		private string _Name;
		[Column(Storage=@"_Name", DbType=@"NChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get { return _Name; }
			set {
				if (_Name != value) {
					OnNameChanging(value);
					SendPropertyChanging();
					_Name = value;
					SendPropertyChanged("Name");
					OnNameChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntitySet<Address> _Addresses;
		[Association(Name=@"FK_Country_Addresses", Storage=@"_Addresses", ThisKey=@"Id", OtherKey=@"CountryId", DeleteRule=@"NO ACTION")]
		[DataMember(Order=3, EmitDefaultValue=false)]
		public EntitySet<Address> Addresses
		{
			get {
				if (serializing && !_Addresses.HasLoadedOrAssignedValues) {
					return null;
				}
				return _Addresses;
			}
			set {
				_Addresses.Assign(value);
			}
		}

		private void attach_Addresses(Address entity)
		{
			SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			SendPropertyChanging();
			entity.Country = null;
		}
		
		#endregion
		
		#region Serialization
		private bool serializing;
		
		[OnSerializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			serializing = true;
		}
		
		[OnSerialized()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			serializing = false;
		}
		
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}

namespace Db.DataAccess.DataSet
{	
	[DataContract()]
	[Table(Name=@"dbo.Item")]
	[KnownType(typeof(Item))]
	public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public Item()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			_Order = default(EntityRef<Order>); 
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnIdChanging(Guid value);
		partial void OnIdChanged();
		private Guid _Id;
		[Column(Storage=@"_Id", DbType=@"UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public Guid Id
		{
			get { return _Id; }
			set {
				if (_Id != value) {
					OnIdChanging(value);
					SendPropertyChanging();
					_Id = value;
					SendPropertyChanged("Id");
					OnIdChanged();
				}
			}
		}
		
		partial void OnNameChanging(string value);
		partial void OnNameChanged();
		private string _Name;
		[Column(Storage=@"_Name", DbType=@"NChar(100) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get { return _Name; }
			set {
				if (_Name != value) {
					OnNameChanging(value);
					SendPropertyChanging();
					_Name = value;
					SendPropertyChanged("Name");
					OnNameChanged();
				}
			}
		}
		
		partial void OnOrderIdChanging(Guid value);
		partial void OnOrderIdChanged();
		private Guid _OrderId;
		[Column(Storage=@"_OrderId", DbType=@"UniqueIdentifier NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public Guid OrderId
		{
			get { return _OrderId; }
			set {
				if (_OrderId != value) {
					if (_Order.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnOrderIdChanging(value);
					SendPropertyChanging();
					_OrderId = value;
					SendPropertyChanged("OrderId");
					OnOrderIdChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntityRef<Order> _Order;
		[Association(Name=@"FK_Order_Items", Storage=@"_Order", ThisKey=@"OrderId", OtherKey=@"Id", IsForeignKey=true)]
		public Order Order
		{
			get {
				return _Order.Entity;
			}
			set {
				Order previousValue = _Order.Entity;
				if ((previousValue != value) || (!_Order.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Order.Entity = null;
						previousValue.Items.Remove(this);
					}
					_Order.Entity = value;
					if (value != null) {
						value.Items.Add(this);
						_OrderId = value.Id;
					}
					else {
						_OrderId = default(Guid);
					}
					SendPropertyChanged("Order");
				}
			}
		}

		#endregion
		
		#region Serialization
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}

namespace Db.DataAccess.DataSet
{	
	[DataContract()]
	[Table(Name=@"dbo.Order")]
	[KnownType(typeof(Order))]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public Order()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			_Items = new EntitySet<Item>(attach_Items, detach_Items);
			_Person = default(EntityRef<Person>); 
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnIdChanging(Guid value);
		partial void OnIdChanged();
		private Guid _Id;
		[Column(Storage=@"_Id", DbType=@"UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public Guid Id
		{
			get { return _Id; }
			set {
				if (_Id != value) {
					OnIdChanging(value);
					SendPropertyChanging();
					_Id = value;
					SendPropertyChanged("Id");
					OnIdChanged();
				}
			}
		}
		
		partial void OnInsertionDateTimeChanging(DateTime value);
		partial void OnInsertionDateTimeChanged();
		private DateTime _InsertionDateTime;
		[Column(Storage=@"_InsertionDateTime", DbType=@"DateTime2(3) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public DateTime InsertionDateTime
		{
			get { return _InsertionDateTime; }
			set {
				if (_InsertionDateTime != value) {
					OnInsertionDateTimeChanging(value);
					SendPropertyChanging();
					_InsertionDateTime = value;
					SendPropertyChanged("InsertionDateTime");
					OnInsertionDateTimeChanged();
				}
			}
		}
		
		partial void OnPersonIdChanging(int value);
		partial void OnPersonIdChanged();
		private int _PersonId;
		[Column(Storage=@"_PersonId", DbType=@"Int NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public int PersonId
		{
			get { return _PersonId; }
			set {
				if (_PersonId != value) {
					if (_Person.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnPersonIdChanging(value);
					SendPropertyChanging();
					_PersonId = value;
					SendPropertyChanged("PersonId");
					OnPersonIdChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntitySet<Item> _Items;
		[Association(Name=@"FK_Order_Items", Storage=@"_Items", ThisKey=@"Id", OtherKey=@"OrderId", DeleteRule=@"NO ACTION")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public EntitySet<Item> Items
		{
			get {
				if (serializing && !_Items.HasLoadedOrAssignedValues) {
					return null;
				}
				return _Items;
			}
			set {
				_Items.Assign(value);
			}
		}

		private void attach_Items(Item entity)
		{
			SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_Items(Item entity)
		{
			SendPropertyChanging();
			entity.Order = null;
		}
		
		private EntityRef<Person> _Person;
		[Association(Name=@"FK_Person_Orders", Storage=@"_Person", ThisKey=@"PersonId", OtherKey=@"Id", IsForeignKey=true)]
		public Person Person
		{
			get {
				return _Person.Entity;
			}
			set {
				Person previousValue = _Person.Entity;
				if ((previousValue != value) || (!_Person.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Person.Entity = null;
						previousValue.Orders.Remove(this);
					}
					_Person.Entity = value;
					if (value != null) {
						value.Orders.Add(this);
						_PersonId = value.Id;
					}
					else {
						_PersonId = default(int);
					}
					SendPropertyChanged("Person");
				}
			}
		}

		#endregion
		
		#region Serialization
		private bool serializing;
		
		[OnSerializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			serializing = true;
		}
		
		[OnSerialized()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			serializing = false;
		}
		
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}

namespace Db.DataAccess.DataSet
{	
	[DataContract()]
	[Table(Name=@"dbo.Person")]
	[KnownType(typeof(Person))]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public Person()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			_Addresses = new EntitySet<Address>(attach_Addresses, detach_Addresses);
			_Orders = new EntitySet<Order>(attach_Orders, detach_Orders);
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnIdChanging(int value);
		partial void OnIdChanged();
		private int _Id;
		[Column(Storage=@"_Id", AutoSync=AutoSync.OnInsert, DbType=@"Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int Id
		{
			get { return _Id; }
			set {
				if (_Id != value) {
					OnIdChanging(value);
					SendPropertyChanging();
					_Id = value;
					SendPropertyChanged("Id");
					OnIdChanged();
				}
			}
		}
		
		partial void OnFirstNameChanging(string value);
		partial void OnFirstNameChanged();
		private string _FirstName;
		[Column(Storage=@"_FirstName", DbType=@"NChar(30) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string FirstName
		{
			get { return _FirstName; }
			set {
				if (_FirstName != value) {
					OnFirstNameChanging(value);
					SendPropertyChanging();
					_FirstName = value;
					SendPropertyChanged("FirstName");
					OnFirstNameChanged();
				}
			}
		}
		
		partial void OnLastNameChanging(string value);
		partial void OnLastNameChanged();
		private string _LastName;
		[Column(Storage=@"_LastName", DbType=@"NChar(30) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string LastName
		{
			get { return _LastName; }
			set {
				if (_LastName != value) {
					OnLastNameChanging(value);
					SendPropertyChanging();
					_LastName = value;
					SendPropertyChanged("LastName");
					OnLastNameChanged();
				}
			}
		}
		
		partial void OnEmailChanging(string value);
		partial void OnEmailChanged();
		private string _Email;
		[Column(Storage=@"_Email", DbType=@"NChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=4)]
		public string Email
		{
			get { return _Email; }
			set {
				if (_Email != value) {
					OnEmailChanging(value);
					SendPropertyChanging();
					_Email = value;
					SendPropertyChanged("Email");
					OnEmailChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntitySet<Address> _Addresses;
		[Association(Name=@"FK_Person_Addresses", Storage=@"_Addresses", ThisKey=@"Id", OtherKey=@"PersonId", DeleteRule=@"NO ACTION")]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public EntitySet<Address> Addresses
		{
			get {
				if (serializing && !_Addresses.HasLoadedOrAssignedValues) {
					return null;
				}
				return _Addresses;
			}
			set {
				_Addresses.Assign(value);
			}
		}

		private void attach_Addresses(Address entity)
		{
			SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			SendPropertyChanging();
			entity.Person = null;
		}
		
		private EntitySet<Order> _Orders;
		[Association(Name=@"FK_Person_Orders", Storage=@"_Orders", ThisKey=@"Id", OtherKey=@"PersonId", DeleteRule=@"NO ACTION")]
		[DataMember(Order=6, EmitDefaultValue=false)]
		public EntitySet<Order> Orders
		{
			get {
				if (serializing && !_Orders.HasLoadedOrAssignedValues) {
					return null;
				}
				return _Orders;
			}
			set {
				_Orders.Assign(value);
			}
		}

		private void attach_Orders(Order entity)
		{
			SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_Orders(Order entity)
		{
			SendPropertyChanging();
			entity.Person = null;
		}
		
		#endregion
		
		#region Serialization
		private bool serializing;
		
		[OnSerializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			serializing = true;
		}
		
		[OnSerialized()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			serializing = false;
		}
		
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}

namespace Db.DataAccess.DataSet
{	
	[DataContract()]
	[Table(Name=@"dbo.TestTable1")]
	[KnownType(typeof(TestTable1))]
	public partial class TestTable1 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public TestTable1()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			_TestTable2s = new EntitySet<TestTable2>(attach_TestTable2s, detach_TestTable2s);
			_TestTable3s = new EntitySet<TestTable3>(attach_TestTable3s, detach_TestTable3s);
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnIdChanging(int value);
		partial void OnIdChanged();
		private int _Id;
		[Column(Storage=@"_Id", AutoSync=AutoSync.OnInsert, DbType=@"Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int Id
		{
			get { return _Id; }
			set {
				if (_Id != value) {
					OnIdChanging(value);
					SendPropertyChanging();
					_Id = value;
					SendPropertyChanged("Id");
					OnIdChanged();
				}
			}
		}
		
		partial void OnDummyChanging(string value);
		partial void OnDummyChanged();
		private string _Dummy;
		[Column(Storage=@"_Dummy", DbType=@"NChar(10) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Dummy
		{
			get { return _Dummy; }
			set {
				if (_Dummy != value) {
					OnDummyChanging(value);
					SendPropertyChanging();
					_Dummy = value;
					SendPropertyChanged("Dummy");
					OnDummyChanged();
				}
			}
		}
		
		partial void OnDummy2Changing(int value);
		partial void OnDummy2Changed();
		private int _Dummy2;
		[Column(Storage=@"_Dummy2", DbType=@"Int NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public int Dummy2
		{
			get { return _Dummy2; }
			set {
				if (_Dummy2 != value) {
					OnDummy2Changing(value);
					SendPropertyChanging();
					_Dummy2 = value;
					SendPropertyChanged("Dummy2");
					OnDummy2Changed();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntitySet<TestTable2> _TestTable2s;
		[Association(Name=@"FK_TestTable1_TestTable2", Storage=@"_TestTable2s", ThisKey=@"Id", OtherKey=@"TestTable1Id", DeleteRule=@"NO ACTION")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public EntitySet<TestTable2> TestTable2s
		{
			get {
				if (serializing && !_TestTable2s.HasLoadedOrAssignedValues) {
					return null;
				}
				return _TestTable2s;
			}
			set {
				_TestTable2s.Assign(value);
			}
		}

		private void attach_TestTable2s(TestTable2 entity)
		{
			SendPropertyChanging();
			entity.TestTable1 = this;
		}
		
		private void detach_TestTable2s(TestTable2 entity)
		{
			SendPropertyChanging();
			entity.TestTable1 = null;
		}
		
		private EntitySet<TestTable3> _TestTable3s;
		[Association(Name=@"FK_TestTable1_TestTable3", Storage=@"_TestTable3s", ThisKey=@"Id", OtherKey=@"TestTable1Id", DeleteRule=@"NO ACTION")]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public EntitySet<TestTable3> TestTable3s
		{
			get {
				if (serializing && !_TestTable3s.HasLoadedOrAssignedValues) {
					return null;
				}
				return _TestTable3s;
			}
			set {
				_TestTable3s.Assign(value);
			}
		}

		private void attach_TestTable3s(TestTable3 entity)
		{
			SendPropertyChanging();
			entity.TestTable1 = this;
		}
		
		private void detach_TestTable3s(TestTable3 entity)
		{
			SendPropertyChanging();
			entity.TestTable1 = null;
		}
		
		#endregion
		
		#region Serialization
		private bool serializing;
		
		[OnSerializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			serializing = true;
		}
		
		[OnSerialized()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			serializing = false;
		}
		
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}

namespace Db.DataAccess.DataSet
{	
	[DataContract()]
	[Table(Name=@"dbo.TestTable2")]
	[KnownType(typeof(TestTable2))]
	public partial class TestTable2 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public TestTable2()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			_TestTable1 = default(EntityRef<TestTable1>); 
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnIdChanging(Guid value);
		partial void OnIdChanged();
		private Guid _Id;
		[Column(Storage=@"_Id", DbType=@"UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public Guid Id
		{
			get { return _Id; }
			set {
				if (_Id != value) {
					OnIdChanging(value);
					SendPropertyChanging();
					_Id = value;
					SendPropertyChanged("Id");
					OnIdChanged();
				}
			}
		}
		
		partial void OnDummy1Changing(string value);
		partial void OnDummy1Changed();
		private string _Dummy1;
		[Column(Storage=@"_Dummy1", DbType=@"NChar(10) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Dummy1
		{
			get { return _Dummy1; }
			set {
				if (_Dummy1 != value) {
					OnDummy1Changing(value);
					SendPropertyChanging();
					_Dummy1 = value;
					SendPropertyChanged("Dummy1");
					OnDummy1Changed();
				}
			}
		}
		
		partial void OnDummy2Changing(int value);
		partial void OnDummy2Changed();
		private int _Dummy2;
		[Column(Storage=@"_Dummy2", DbType=@"Int NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public int Dummy2
		{
			get { return _Dummy2; }
			set {
				if (_Dummy2 != value) {
					OnDummy2Changing(value);
					SendPropertyChanging();
					_Dummy2 = value;
					SendPropertyChanged("Dummy2");
					OnDummy2Changed();
				}
			}
		}
		
		partial void OnTestTable1IdChanging(int value);
		partial void OnTestTable1IdChanged();
		private int _TestTable1Id;
		[Column(Storage=@"_TestTable1Id", DbType=@"Int NOT NULL", CanBeNull=false)]
		[DataMember(Order=4)]
		public int TestTable1Id
		{
			get { return _TestTable1Id; }
			set {
				if (_TestTable1Id != value) {
					if (_TestTable1.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnTestTable1IdChanging(value);
					SendPropertyChanging();
					_TestTable1Id = value;
					SendPropertyChanged("TestTable1Id");
					OnTestTable1IdChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntityRef<TestTable1> _TestTable1;
		[Association(Name=@"FK_TestTable1_TestTable2", Storage=@"_TestTable1", ThisKey=@"TestTable1Id", OtherKey=@"Id", IsForeignKey=true)]
		public TestTable1 TestTable1
		{
			get {
				return _TestTable1.Entity;
			}
			set {
				TestTable1 previousValue = _TestTable1.Entity;
				if ((previousValue != value) || (!_TestTable1.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_TestTable1.Entity = null;
						previousValue.TestTable2s.Remove(this);
					}
					_TestTable1.Entity = value;
					if (value != null) {
						value.TestTable2s.Add(this);
						_TestTable1Id = value.Id;
					}
					else {
						_TestTable1Id = default(int);
					}
					SendPropertyChanged("TestTable1");
				}
			}
		}

		#endregion
		
		#region Serialization
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}

namespace Db.DataAccess.DataSet
{	
	[DataContract()]
	[Table(Name=@"dbo.TestTable3")]
	[KnownType(typeof(TestTable3))]
	public partial class TestTable3 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public TestTable3()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			_TestTable1 = default(EntityRef<TestTable1>); 
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnTestTable3IdChanging(int value);
		partial void OnTestTable3IdChanged();
		private int _TestTable3Id;
		[Column(Storage=@"_TestTable3Id", AutoSync=AutoSync.OnInsert, DbType=@"Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int TestTable3Id
		{
			get { return _TestTable3Id; }
			set {
				if (_TestTable3Id != value) {
					OnTestTable3IdChanging(value);
					SendPropertyChanging();
					_TestTable3Id = value;
					SendPropertyChanged("TestTable3Id");
					OnTestTable3IdChanged();
				}
			}
		}
		
		partial void OnTestTable1IdChanging(int value);
		partial void OnTestTable1IdChanged();
		private int _TestTable1Id;
		[Column(Storage=@"_TestTable1Id", DbType=@"Int NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public int TestTable1Id
		{
			get { return _TestTable1Id; }
			set {
				if (_TestTable1Id != value) {
					if (_TestTable1.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnTestTable1IdChanging(value);
					SendPropertyChanging();
					_TestTable1Id = value;
					SendPropertyChanged("TestTable1Id");
					OnTestTable1IdChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntityRef<TestTable1> _TestTable1;
		[Association(Name=@"FK_TestTable1_TestTable3", Storage=@"_TestTable1", ThisKey=@"TestTable1Id", OtherKey=@"Id", IsForeignKey=true)]
		public TestTable1 TestTable1
		{
			get {
				return _TestTable1.Entity;
			}
			set {
				TestTable1 previousValue = _TestTable1.Entity;
				if ((previousValue != value) || (!_TestTable1.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_TestTable1.Entity = null;
						previousValue.TestTable3s.Remove(this);
					}
					_TestTable1.Entity = value;
					if (value != null) {
						value.TestTable3s.Add(this);
						_TestTable1Id = value.Id;
					}
					else {
						_TestTable1Id = default(int);
					}
					SendPropertyChanged("TestTable1");
				}
			}
		}

		#endregion
		
		#region Serialization
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}

namespace Db.DataAccess.DataSet
{	
	[DataContract()]
	[Table(Name=@"dbo.TestTable4")]
	[KnownType(typeof(TestTable4))]
	public partial class TestTable4 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public TestTable4()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnIdChanging(int value);
		partial void OnIdChanged();
		private int _Id;
		[Column(Storage=@"_Id", DbType=@"Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int Id
		{
			get { return _Id; }
			set {
				if (_Id != value) {
					OnIdChanging(value);
					SendPropertyChanging();
					_Id = value;
					SendPropertyChanged("Id");
					OnIdChanged();
				}
			}
		}
		
		#endregion
		
		#region Serialization
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}

namespace Db.DataAccess.DataSet
{
	[DataContract()]
	public partial class Sp_helpdiagramdefinitionResult
	{
		
		private int? _Version;
		[Column(Storage=@"_Version", Name=@"version", DbType=@"Int")]
		[DataMember(Order=1)]
		public int? Version {
			get { return _Version; }
			set {
				if (_Version != value) {
					_Version = value;
				}
			}
		}
		
		private Binary _Definition;
		[Column(Storage=@"_Definition", Name=@"definition", DbType=@"VarBinary(MAX)")]
		[DataMember(Order=2)]
		public Binary Definition {
			get { return _Definition; }
			set {
				if (_Definition != value) {
					_Definition = value;
				}
			}
		}
	}
}

namespace Db.DataAccess.DataSet
{
	[DataContract()]
	public partial class Sp_helpdiagramsResult
	{
		
		private string _Database;
		[Column(Storage=@"_Database", DbType=@"NVarChar(128)")]
		[DataMember(Order=1)]
		public string Database {
			get { return _Database; }
			set {
				if (_Database != value) {
					_Database = value;
				}
			}
		}
		
		private string _Name;
		[Column(Storage=@"_Name", DbType=@"NVarChar(128)")]
		[DataMember(Order=2)]
		public string Name {
			get { return _Name; }
			set {
				if (_Name != value) {
					_Name = value;
				}
			}
		}
		
		private int? _ID;
		[Column(Storage=@"_ID", DbType=@"Int")]
		[DataMember(Order=3)]
		public int? ID {
			get { return _ID; }
			set {
				if (_ID != value) {
					_ID = value;
				}
			}
		}
		
		private string _Owner;
		[Column(Storage=@"_Owner", DbType=@"NVarChar(128)")]
		[DataMember(Order=4)]
		public string Owner {
			get { return _Owner; }
			set {
				if (_Owner != value) {
					_Owner = value;
				}
			}
		}
		
		private int? _OwnerID;
		[Column(Storage=@"_OwnerID", DbType=@"Int")]
		[DataMember(Order=5)]
		public int? OwnerID {
			get { return _OwnerID; }
			set {
				if (_OwnerID != value) {
					_OwnerID = value;
				}
			}
		}
	}
}
#pragma warning restore 1591