#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated> 
//     This code was generated by LINQ to SQL template for T4 C#
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Db.DataAccess.DataSet
{
    using System;
    using System.ComponentModel;
    using System.Data.Linq;
    using System.Data.Linq.Mapping;
	using LinqToSQL3.Example.DataAccess;
    using System.Reflection;
        using System.Runtime.Serialization;
    
   //Warning: Avoid using an existing table name for the database name
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name=@"UserOrderItems")]
	public partial class DbDataContext : System.Data.Linq.DataContext
	{
		private static MappingSource mappingSource = new AttributeMappingSource();
		
		#region Extensibility Method Definitions

		partial void OnCreated();
		partial void InsertItem(Item instance);
		partial void UpdateItem(Item instance);
		partial void DeleteItem(Item instance);
		partial void InsertOrder(Order instance);
		partial void UpdateOrder(Order instance);
		partial void DeleteOrder(Order instance);
		partial void InsertUser(User instance);
		partial void UpdateUser(User instance);
		partial void DeleteUser(User instance);
		#endregion
		
		#region Construction
	
		public DbDataContext(string connection) :
			base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(System.Data.IDbConnection connection) :
			base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(string connection, MappingSource mappingSource) :
			base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
			base(connection, mappingSource)
		{
			OnCreated();
		}
		#endregion
		
		#region Tables
		public System.Data.Linq.Table<Item> Items
		{
			get 
            { 
                return this.GetTable<Item>(); 
            }
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get 
            { 
                return this.GetTable<Order>(); 
            }
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get 
            { 
                return this.GetTable<User>(); 
            }
		}
		
		#endregion
		
		#region Functions
		#endregion
		
	}

    #region Start table generation
[DataContract(IsReference=true)]
        
    [Table(Name=@"dbo.Item")]	[KnownType(typeof(Item))]  
    public partial class Item : DbEntity<Item,System.Int32>
	{

        private  DbId<Item, System.Int32>  _Id;
        
        private  decimal  _Price;
        
        private  DbId<Order, System.Int32>  _OrderId;
        
        #region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
         partial void OnIdChanging( DbId<Item, System.Int32>  value);
		partial void OnIdChanged();
                partial void OnPriceChanging( decimal  value);
		partial void OnPriceChanged();
                partial void OnOrderIdChanging( DbId<Order, System.Int32>  value);
		partial void OnOrderIdChanged();
        		#endregion

		#region Construction
		public Item()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			this._Order = default(EntityRef<Order>); 
			OnCreated();
		}
		#endregion

		#region Column Mappings
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
        public   DbId<Item, System.Int32>  Id
		{
			get 
            { 
                return this._Id; 
            }
			set 
            {
				if ((this._Id != value)) 
                {
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(6,2) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
        public   decimal  Price
		{
			get 
            { 
                return this._Price; 
            }
			set 
            {
				if ((this._Price != value)) 
                {
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="Int NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
        public   DbId<Order, System.Int32>  OrderId
		{
			get 
            { 
                return this._OrderId; 
            }
			set 
            {
				if ((this._OrderId != value)) 
                {
					if (this._Order.HasLoadedOrAssignedValue) 
                    {
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntityRef<Order> _Order;
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Item_Order", Storage="_Order", ThisKey="OrderId", OtherKey="Id", IsForeignKey=true)]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public Order Order
		{
			get 
            {
				return this._Order.Entity;
			}
			set 
            {
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
                            || (this._Order.HasLoadedOrAssignedValue == false))) 
                {
					this.SendPropertyChanging();
					if ((previousValue != null)) 
                    {
						this._Order.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null)) 
                    {
						value.Items.Add(this);
						this._OrderId = value.Id;
					}
					else 
                    {
						this._OrderId = default;
					}
					this.SendPropertyChanged("Order");
				}
			}
		}

		#endregion
		
		#region Serialization
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
[DataContract(IsReference=true)]
        
    [Table(Name=@"dbo.Order")]	[KnownType(typeof(Order))]  
    public partial class Order : DbEntity<Order,System.Int32>
	{

        private  DbId<Order, System.Int32>  _Id;
        
        private  System.DateTime  _InsertTimestamp;
        
        private  DbId<User, System.Int32>  _UserId;
        
        #region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
         partial void OnIdChanging( DbId<Order, System.Int32>  value);
		partial void OnIdChanged();
                partial void OnInsertTimestampChanging( System.DateTime  value);
		partial void OnInsertTimestampChanged();
                partial void OnUserIdChanging( DbId<User, System.Int32>  value);
		partial void OnUserIdChanged();
        		#endregion

		#region Construction
		public Order()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			this._Items = new EntitySet<Item>(attach_Items, detach_Items);
			this._User = default(EntityRef<User>); 
			OnCreated();
		}
		#endregion

		#region Column Mappings
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
        public   DbId<Order, System.Int32>  Id
		{
			get 
            { 
                return this._Id; 
            }
			set 
            {
				if ((this._Id != value)) 
                {
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertTimestamp", DbType="DateTime2(7) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
        public   System.DateTime  InsertTimestamp
		{
			get 
            { 
                return this._InsertTimestamp; 
            }
			set 
            {
				if ((this._InsertTimestamp != value)) 
                {
					this.OnInsertTimestampChanging(value);
					this.SendPropertyChanging();
					this._InsertTimestamp = value;
					this.SendPropertyChanged("InsertTimestamp");
					this.OnInsertTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
        public   DbId<User, System.Int32>  UserId
		{
			get 
            { 
                return this._UserId; 
            }
			set 
            {
				if ((this._UserId != value)) 
                {
					if (this._User.HasLoadedOrAssignedValue) 
                    {
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntitySet<Item> _Items;
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Item_Order", Storage="_Items", ThisKey="Id", OtherKey="OrderId", DeleteRule="NO ACTION")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public EntitySet<Item> Items
		{
			get 
            {
				if (serializing && !_Items.HasLoadedOrAssignedValues) 
                {
					return null;
				}
				return _Items;
			}
			set 
            {
				_Items.Assign(value);
			}
		}

		private void attach_Items(Item entity)
		{
			SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_Items(Item entity)
		{
			SendPropertyChanging();
			entity.Order = null;
		}
		
		private EntityRef<User> _User;
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Order_User", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public User User
		{
			get 
            {
				if (serializing && !_User.HasLoadedOrAssignedValue) {
					return null;
				}
				return this._User.Entity;
			}
			set 
            {
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
                            || (this._User.HasLoadedOrAssignedValue == false))) 
                {
					this.SendPropertyChanging();
					if ((previousValue != null)) 
                    {
						this._User.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null)) 
                    {
						value.Orders.Add(this);
						this._UserId = value.Id;
					}
					else 
                    {
						this._UserId = default;
					}
					this.SendPropertyChanged("User");
				}
			}
		}

		#endregion
		
		#region Serialization
		private bool serializing;
		
		[OnSerializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			serializing = true;
		}
		
		[OnSerialized()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			serializing = false;
		}
		
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
[DataContract(IsReference=true)]
        
    [Table(Name=@"dbo.User")]	[KnownType(typeof(User))]  
    public partial class User : DbEntity<User,System.Int32>
	{

        private  DbId<User, System.Int32>  _Id;
        
        private  string  _FirstName;
        
        private  string  _LastName;
        
        private  string  _Email;
        
        #region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
         partial void OnIdChanging( DbId<User, System.Int32>  value);
		partial void OnIdChanged();
                partial void OnFirstNameChanging( string  value);
		partial void OnFirstNameChanged();
                partial void OnLastNameChanging( string  value);
		partial void OnLastNameChanged();
                partial void OnEmailChanging( string  value);
		partial void OnEmailChanged();
        		#endregion

		#region Construction
		public User()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			this._Orders = new EntitySet<Order>(attach_Orders, detach_Orders);
			OnCreated();
		}
		#endregion

		#region Column Mappings
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
        public   DbId<User, System.Int32>  Id
		{
			get 
            { 
                return this._Id; 
            }
			set 
            {
				if ((this._Id != value)) 
                {
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
        public   string  FirstName
		{
			get 
            { 
                return this._FirstName; 
            }
			set 
            {
				if ((this._FirstName != value)) 
                {
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
        public   string  LastName
		{
			get 
            { 
                return this._LastName; 
            }
			set 
            {
				if ((this._LastName != value)) 
                {
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=4)]
        public   string  Email
		{
			get 
            { 
                return this._Email; 
            }
			set 
            {
				if ((this._Email != value)) 
                {
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntitySet<Order> _Orders;
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Order_User", Storage="_Orders", ThisKey="Id", OtherKey="UserId", DeleteRule="NO ACTION")]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public EntitySet<Order> Orders
		{
			get 
            {
				if (serializing && !_Orders.HasLoadedOrAssignedValues) 
                {
					return null;
				}
				return _Orders;
			}
			set 
            {
				_Orders.Assign(value);
			}
		}

		private void attach_Orders(Order entity)
		{
			SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Orders(Order entity)
		{
			SendPropertyChanging();
			entity.User = null;
		}
		
		#endregion
		
		#region Serialization
		private bool serializing;
		
		[OnSerializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			serializing = true;
		}
		
		[OnSerialized()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			serializing = false;
		}
		
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
    #endregion // end table creation

    }
#pragma warning restore 1591
